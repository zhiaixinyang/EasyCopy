package com.mdove.easycopy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.easycopy.greendao.entity.AllImages;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_IMAGES".
*/
public class AllImagesDao extends AbstractDao<AllImages, Long> {

    public static final String TABLENAME = "ALL_IMAGES";

    /**
     * Properties of entity AllImages.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MId = new Property(0, Long.class, "mId", true, "_id");
        public final static Property MPath = new Property(1, String.class, "mPath", false, "M_PATH");
        public final static Property MWidth = new Property(2, int.class, "mWidth", false, "M_WIDTH");
        public final static Property MHeight = new Property(3, int.class, "mHeight", false, "M_HEIGHT");
    }


    public AllImagesDao(DaoConfig config) {
        super(config);
    }
    
    public AllImagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_IMAGES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mId
                "\"M_PATH\" TEXT," + // 1: mPath
                "\"M_WIDTH\" INTEGER NOT NULL ," + // 2: mWidth
                "\"M_HEIGHT\" INTEGER NOT NULL );"); // 3: mHeight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_IMAGES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllImages entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String mPath = entity.getMPath();
        if (mPath != null) {
            stmt.bindString(2, mPath);
        }
        stmt.bindLong(3, entity.getMWidth());
        stmt.bindLong(4, entity.getMHeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllImages entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String mPath = entity.getMPath();
        if (mPath != null) {
            stmt.bindString(2, mPath);
        }
        stmt.bindLong(3, entity.getMWidth());
        stmt.bindLong(4, entity.getMHeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AllImages readEntity(Cursor cursor, int offset) {
        AllImages entity = new AllImages( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mPath
            cursor.getInt(offset + 2), // mWidth
            cursor.getInt(offset + 3) // mHeight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllImages entity, int offset) {
        entity.setMId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMWidth(cursor.getInt(offset + 2));
        entity.setMHeight(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AllImages entity, long rowId) {
        entity.setMId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AllImages entity) {
        if(entity != null) {
            return entity.getMId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AllImages entity) {
        return entity.getMId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
